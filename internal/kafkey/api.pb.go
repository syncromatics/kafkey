// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package kafkey

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Offset int32

const (
	Offset_EARLIEST Offset = 0
	Offset_LATEST   Offset = 1
)

var Offset_name = map[int32]string{
	0: "EARLIEST",
	1: "LATEST",
}

var Offset_value = map[string]int32{
	"EARLIEST": 0,
	"LATEST":   1,
}

func (x Offset) String() string {
	return proto.EnumName(Offset_name, int32(x))
}

func (Offset) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type WatchRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Offset               Offset   `protobuf:"varint,3,opt,name=offset,proto3,enum=kafkey.Offset" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRequest.Unmarshal(m, b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRequest.Size(m)
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

func (m *WatchRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *WatchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WatchRequest) GetOffset() Offset {
	if m != nil {
		return m.Offset
	}
	return Offset_EARLIEST
}

type WatchResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchResponse) Reset()         { *m = WatchResponse{} }
func (m *WatchResponse) String() string { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()    {}
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *WatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchResponse.Unmarshal(m, b)
}
func (m *WatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchResponse.Marshal(b, m, deterministic)
}
func (m *WatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse.Merge(m, src)
}
func (m *WatchResponse) XXX_Size() int {
	return xxx_messageInfo_WatchResponse.Size(m)
}
func (m *WatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse proto.InternalMessageInfo

func (m *WatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("kafkey.Offset", Offset_name, Offset_value)
	proto.RegisterType((*WatchRequest)(nil), "kafkey.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "kafkey.WatchResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0x4e, 0x4c, 0xcb, 0x4e, 0xad, 0x54, 0x8a, 0xe3,
	0xe2, 0x09, 0x4f, 0x2c, 0x49, 0xce, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1,
	0x62, 0x2d, 0xc9, 0x2f, 0xc8, 0x4c, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84,
	0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x98, 0xc0, 0x62, 0x20, 0xa6, 0x90, 0x1a, 0x17, 0x5b,
	0x7e, 0x5a, 0x5a, 0x71, 0x6a, 0x89, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x9f, 0x11, 0x9f, 0x1e, 0xc4,
	0x40, 0x3d, 0x88, 0x68, 0x10, 0x54, 0x56, 0x49, 0x93, 0x8b, 0x17, 0x6a, 0x7e, 0x71, 0x41, 0x7e,
	0x5e, 0x71, 0xaa, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0xd4, 0x0a,
	0x18, 0x57, 0x4b, 0x09, 0x66, 0xa4, 0x10, 0x0f, 0x17, 0x87, 0xab, 0x63, 0x90, 0x8f, 0xa7, 0x6b,
	0x70, 0x88, 0x00, 0x83, 0x10, 0x17, 0x17, 0x9b, 0x8f, 0x63, 0x08, 0x88, 0xcd, 0x68, 0xe4, 0xc0,
	0xc5, 0xe6, 0x0d, 0xb6, 0x47, 0xc8, 0x8c, 0x8b, 0x15, 0x6c, 0xb0, 0x90, 0x08, 0xcc, 0x66, 0x64,
	0x7f, 0x48, 0x89, 0xa2, 0x89, 0x42, 0x6c, 0x37, 0x60, 0x4c, 0x62, 0x03, 0xfb, 0xdf, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x22, 0x54, 0x88, 0x0c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KafkeyClient is the client API for Kafkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KafkeyClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Kafkey_WatchClient, error)
}

type kafkeyClient struct {
	cc *grpc.ClientConn
}

func NewKafkeyClient(cc *grpc.ClientConn) KafkeyClient {
	return &kafkeyClient{cc}
}

func (c *kafkeyClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Kafkey_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kafkey_serviceDesc.Streams[0], "/kafkey.Kafkey/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &kafkeyWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kafkey_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type kafkeyWatchClient struct {
	grpc.ClientStream
}

func (x *kafkeyWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KafkeyServer is the server API for Kafkey service.
type KafkeyServer interface {
	Watch(*WatchRequest, Kafkey_WatchServer) error
}

// UnimplementedKafkeyServer can be embedded to have forward compatible implementations.
type UnimplementedKafkeyServer struct {
}

func (*UnimplementedKafkeyServer) Watch(req *WatchRequest, srv Kafkey_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterKafkeyServer(s *grpc.Server, srv KafkeyServer) {
	s.RegisterService(&_Kafkey_serviceDesc, srv)
}

func _Kafkey_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafkeyServer).Watch(m, &kafkeyWatchServer{stream})
}

type Kafkey_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type kafkeyWatchServer struct {
	grpc.ServerStream
}

func (x *kafkeyWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Kafkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kafkey.Kafkey",
	HandlerType: (*KafkeyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Kafkey_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
